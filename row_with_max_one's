# Given a m x n binary matrix mat, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row.

# In case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected.

# Return an array containing the index of the row, and the number of ones in it.

# Input: mat = [[0,0,0],[0,1,1]]
# Output: [1,2]
# Explanation: The row indexed 1 has the maximum count of ones (2). So we return its index, 1, and the count. So, the answer is [1,2].


//code
class Solution {
public:
    vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {
        vector <int> ans;
        int n=mat.size();
        int OneCount=INT_MIN;
        int rowNo=0;//randomly
        for(int i=0; i<n; i++){
            int count=0;
            for(int j=0; j<mat[i].size(); j++){
                if(mat[i][j]==1){
                    count++;
                }
            }
            if(count>OneCount){
                OneCount=count;
                rowNo=i;
            }
        }
        ans.push_back(rowNo);
        ans.push_back(OneCount);
        return ans;
    }
};
